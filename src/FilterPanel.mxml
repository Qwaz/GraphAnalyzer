<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:local="*">
	<fx:Script>
		<![CDATA[
			import events.ListClickEvent;
			import mx.collections.ArrayList;
			import filters.*;
			import utils.getClassReference;
			
			[Bindable]
			private static var filterList:ArrayList = new ArrayList([
				C_LTFilter,
				C_NandFilter,
				C_AndFilter,
				C_OrFilter,
				C_NotFilter,
				T_AlwaysFilter,
				A_InvisibleFilter,
			]);
			
			[Bindable]
			private static var _appliedList:ArrayList = new ArrayList();
			
			private static var LastAppliedList:ArrayList;
			
			public static function get appliedList():ArrayList {
				return _appliedList;
			}
			
			private function addFilter(e:ListClickEvent):void {
				var selectedFilter:Class = filterList.getItemAt(e.index) as Class;
				_appliedList.addItem(new selectedFilter());
			}
			
			private function reset():void
			{
				for (var i:int = 0; i < filterList.length; i++) {
					var filter:Class = filterList.getItemAt(i) as Class;
					var kakaotalk:Object = new filter;
					
					if (kakaotalk is ApplyFilter)
					{
						(kakaotalk as ApplyFilter).reset();
					}
				}
			}
			
			public function ApplyButtonPressed():void
			{
				LastAppliedList = new ArrayList();
				for (var i:int = 0; i < _appliedList.length; ++i)
				{
					var selectedFilter:Class;
					var nowFilter:Filter;
					var len:int;
					
					selectedFilter = getClassReference(_appliedList.getItemAt(i));
					nowFilter = new selectedFilter;
					LastAppliedList.addItem(nowFilter);
					nowFilter.filterName = (_appliedList.getItemAt(i) as Filter).filterName;
					len = nowFilter.getParameters().length;
					
					for (var j:int = 0; i < len; ++i)
					{
						nowFilter.params[j] = (_appliedList.getItemAt(i) as Filter).params[j];
					}
					
					nowFilter.initParameter(LastAppliedList);
				}
				render();
			}
			
			public function render():void {
				var i:int, j:int, end:int;
				
				reset();
				
				for (i = 0; i < _appliedList.length; i++) {
					var now:Filter = _appliedList.getItemAt(i) as Filter;
					
					end = now.getParameters().length;
					for (j = 0; j < end; j++) {
						if (!now.parameter[j]) {
							result.text = (i + 1) + "번째 필터의 " + (j + 1) + "번째 매개변수에 오류";
							break;
						}
					}
					
					if (j == end) {
						//필터 매개변수 체크 성공시
						if (now is ApplyFilter) {
							(now as ApplyFilter).apply();
						}
					} else break;
				}
				
				if(i == _appliedList.length){
					result.text = "성공!";
				}
			}
		]]>
	</fx:Script>
	
	<mx:VDividedBox width="100%" height="100%" liveDragging="true">
		<s:VGroup width="100%" height="70%">
			<s:List id="appliedFilter" verticalScrollPolicy="on" horizontalScrollPolicy="off"
			width="100%" height="100%" dataProvider="{_appliedList}" itemRenderer="renderers.AppliedFilterRenderer">
			</s:List>

			<s:HGroup width="100%" height="20">
				<s:Label id="result" width="100%">초기화</s:Label>
				<s:Button click="ApplyButtonPressed()">적용</s:Button>
			</s:HGroup>
		</s:VGroup>
		
		<s:List id="filterSelector" width="100%" height="30%" dataProvider="{filterList}" itemRenderer="renderers.FilterSelectorRenderer"
		creationComplete="filterSelector.addEventListener('listClickEvent', addFilter);">
		</s:List>
	</mx:VDividedBox>
</s:Panel>