<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:local="*"
		 creationComplete="panel=this;ApplyButtonPressed();">
	<fx:Script>
		<![CDATA[
			import events.ListClickEvent;
			import filters.*;
			
			import mx.collections.ArrayList;
			import utils.getClassReference;
			
			public static var panel:FilterPanel;
			
			[Bindable]
			private static var filterList:ArrayList = new ArrayList([
				C_LTFilter,
				C_NotFilter,
				C_OrFilter,
				C_AndFilter,
				T_AlwaysFilter,
				T_OnceFilter,
				A_InvisibleFilter,
				A_VisibleFilter,
				A_WeightFilter,
				A_LinearWeightFilter,
				A_LogarithmicWeightFilter,
			]);
			
			[Bindable]
			private static var _appliedList:ArrayList = new ArrayList();
			
			private static var LastAppliedList:ArrayList;
			private static var LastSucceeded:Boolean = true;
			private static var ncon:int = 1, ntime:int = 1, napply:int = 1;
			
			public static function get appliedList():ArrayList {
				return _appliedList;
			}
			
			private function addFilter(e:ListClickEvent):void {
				var selectedFilter:Class = filterList.getItemAt(e.index) as Class;
				var newFilter:Filter = new selectedFilter();
				
				if (newFilter is ConditionFilter)
				{
					newFilter.filterName = "C" + (ncon++).toString();
				}
				else if (newFilter is TimeFilter)
				{
					newFilter.filterName = "T" + (ntime++).toString();
				}
				else if (newFilter is ApplyFilter)
				{
					newFilter.filterName = "A" + (napply++).toString();
				}
				else
				{
					throw new Error("새로운 필터????");
				}
				
				_appliedList.addItem(newFilter);
			}
			
			private function reset():void
			{
				for (var i:int = 0; i < filterList.length; i++) {
					var filter:Class = filterList.getItemAt(i) as Class;
					var kakaotalk:Object = new filter;
					
					if (kakaotalk is ApplyFilter)
					{
						(kakaotalk as ApplyFilter).reset();
					}
				}
			}
			
			private function ApplyButtonPressed():void
			{
				try
				{
					LastAppliedList = new ArrayList();
					
					for (var i:int = 0; i < _appliedList.length; ++i)
					{
						var selectedFilter:Class;
						var nowFilter:Filter;
						var len:int;
						
						selectedFilter = getClassReference(_appliedList.getItemAt(i));
						nowFilter = new selectedFilter();
						if (nowFilter is ApplyFilter) {
							ApplyFilter(nowFilter).activated = ApplyFilter(_appliedList.getItemAt(i)).activated;
						}
						LastAppliedList.addItem(nowFilter);
						nowFilter.filterName = (_appliedList.getItemAt(i) as Filter).filterName;
						len = nowFilter.getParameters().length;
						
						nowFilter.params.removeAll();
						for (var j:int = 0; j < len; ++j)
						{
							nowFilter.params.addItem(
								(_appliedList.getItemAt(i) as Filter).params.getItemAt(j));
						}
						
						nowFilter.initParameter(LastAppliedList);
					}
					
					LastSucceeded = true;
					ApplyFilters();
					result.text = "성공!";
				}
				catch (e:Error)
				{
					result.text = e.message;
				}
			}
			
			public function ApplyFilters():void {
				var i:int;
				var now:Filter;
				
				if (LastSucceeded)
				{
					reset();
					
					for (i = 0; i < LastAppliedList.length; i++) {
						now = LastAppliedList.getItemAt(i) as Filter;
						
						if (now is ApplyFilter && (now as ApplyFilter).activated)
						{
							(now as ApplyFilter).apply();
						}
					}
					
					Canvas.canvas.reDraw();
				}
			}
		]]>
	</fx:Script>
	
	<mx:VDividedBox width="100%" height="100%" liveDragging="true">
		<s:VGroup width="100%" height="70%">
			<s:List id="appliedFilter" verticalScrollPolicy="on" horizontalScrollPolicy="off"
			width="100%" height="100%" dataProvider="{_appliedList}" itemRenderer="renderers.AppliedFilterRenderer">
			</s:List>

			<s:HGroup width="100%" height="20">
				<s:Label id="result" width="100%">초기화</s:Label>
				<s:Button click="ApplyButtonPressed()">적용</s:Button>
			</s:HGroup>
		</s:VGroup>
		
		<s:List id="filterSelector" width="100%" height="30%" dataProvider="{filterList}" itemRenderer="renderers.FilterSelectorRenderer"
		creationComplete="filterSelector.addEventListener('listClickEvent', addFilter);">
		</s:List>
	</mx:VDividedBox>
</s:Panel>